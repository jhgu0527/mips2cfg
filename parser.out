Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt
Rule 3     stmt_list -> stmt_list stmt
Rule 4     stmt -> EOL
Rule 5     stmt -> instruction EOL
Rule 6     stmt -> segment EOL
Rule 7     stmt -> labelInstruction EOL
Rule 8     stmt -> controlInstruction EOL
Rule 9     labelInstruction -> LABEL COLON
Rule 10    labelInstruction -> LABEL COLON DIRECTIVE STRING
Rule 11    labelInstruction -> LABEL COLON DIRECTIVE NUMBER
Rule 12    controlInstruction -> JUMP_LABEL LABEL
Rule 13    controlInstruction -> JUMP_REG REGISTER
Rule 14    controlInstruction -> BRANCH_ZERO_INSTRUCTION REGISTER LABEL
Rule 15    controlInstruction -> BRANCH_INSTRUCTION REGISTER REGISTER LABEL
Rule 16    controlInstruction -> BRANCH_INSTRUCTION REGISTER NUMBER LABEL
Rule 17    segment -> SEGMENT
Rule 18    instruction -> SYSCALL
Rule 19    instruction -> RINSTRUCTION REGISTER REGISTER REGISTER
Rule 20    instruction -> RINSTRUCTION REGISTER REGISTER NUMBER
Rule 21    instruction -> AL_IM_INSTRUCTION REGISTER REGISTER NUMBER
Rule 22    instruction -> L_IM_INSTRUCTION REGISTER NUMBER
Rule 23    instruction -> LS_INSTRUCTION REGISTER LABEL
Rule 24    instruction -> LS_INSTRUCTION REGISTER LP REGISTER RP
Rule 25    instruction -> LS_INSTRUCTION REGISTER NUMBER LP REGISTER RP
Rule 26    instruction -> LA_INSTRUCTION REGISTER LABEL
Rule 27    instruction -> COMPARISON_INSTRUCTION REGISTER REGISTER REGISTER
Rule 28    instruction -> COMPARISON_IM_INSTRUCTION REGISTER REGISTER NUMBER
Rule 29    instruction -> DATAMOVE_INSTRUCTION REGISTER
Rule 30    instruction -> MOVE_INSTRUCTION REGISTER REGISTER

Terminals, with rules where they appear

AL_IM_INSTRUCTION    : 21
BRANCH_INSTRUCTION   : 15 16
BRANCH_ZERO_INSTRUCTION : 14
COLON                : 9 10 11
COMMENT              : 
COMPARISON_IM_INSTRUCTION : 28
COMPARISON_INSTRUCTION : 27
DATAMOVE_INSTRUCTION : 29
DIRECTIVE            : 10 11
EOL                  : 4 5 6 7 8
JUMP_LABEL           : 12
JUMP_REG             : 13
LABEL                : 9 10 11 12 14 15 16 23 26
LA_INSTRUCTION       : 26
LP                   : 24 25
LS_INSTRUCTION       : 23 24 25
L_IM_INSTRUCTION     : 22
MOVE_INSTRUCTION     : 30
NUMBER               : 11 16 20 21 22 25 28
REGISTER             : 13 14 15 15 16 19 19 19 20 20 21 21 22 23 24 24 25 25 26 27 27 27 28 28 29 30 30
RINSTRUCTION         : 19 20
RP                   : 24 25
SEGMENT              : 17
STRING               : 10
SYSCALL              : 18
error                : 

Nonterminals, with rules where they appear

controlInstruction   : 8
instruction          : 5
labelInstruction     : 7
program              : 0
segment              : 6
stmt                 : 2 3
stmt_list            : 1 3

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt
    (3) stmt_list -> . stmt_list stmt
    (4) stmt -> . EOL
    (5) stmt -> . instruction EOL
    (6) stmt -> . segment EOL
    (7) stmt -> . labelInstruction EOL
    (8) stmt -> . controlInstruction EOL
    (18) instruction -> . SYSCALL
    (19) instruction -> . RINSTRUCTION REGISTER REGISTER REGISTER
    (20) instruction -> . RINSTRUCTION REGISTER REGISTER NUMBER
    (21) instruction -> . AL_IM_INSTRUCTION REGISTER REGISTER NUMBER
    (22) instruction -> . L_IM_INSTRUCTION REGISTER NUMBER
    (23) instruction -> . LS_INSTRUCTION REGISTER LABEL
    (24) instruction -> . LS_INSTRUCTION REGISTER LP REGISTER RP
    (25) instruction -> . LS_INSTRUCTION REGISTER NUMBER LP REGISTER RP
    (26) instruction -> . LA_INSTRUCTION REGISTER LABEL
    (27) instruction -> . COMPARISON_INSTRUCTION REGISTER REGISTER REGISTER
    (28) instruction -> . COMPARISON_IM_INSTRUCTION REGISTER REGISTER NUMBER
    (29) instruction -> . DATAMOVE_INSTRUCTION REGISTER
    (30) instruction -> . MOVE_INSTRUCTION REGISTER REGISTER
    (17) segment -> . SEGMENT
    (9) labelInstruction -> . LABEL COLON
    (10) labelInstruction -> . LABEL COLON DIRECTIVE STRING
    (11) labelInstruction -> . LABEL COLON DIRECTIVE NUMBER
    (12) controlInstruction -> . JUMP_LABEL LABEL
    (13) controlInstruction -> . JUMP_REG REGISTER
    (14) controlInstruction -> . BRANCH_ZERO_INSTRUCTION REGISTER LABEL
    (15) controlInstruction -> . BRANCH_INSTRUCTION REGISTER REGISTER LABEL
    (16) controlInstruction -> . BRANCH_INSTRUCTION REGISTER NUMBER LABEL

    EOL             shift and go to state 4
    SYSCALL         shift and go to state 9
    RINSTRUCTION    shift and go to state 10
    AL_IM_INSTRUCTION shift and go to state 11
    L_IM_INSTRUCTION shift and go to state 12
    LS_INSTRUCTION  shift and go to state 13
    LA_INSTRUCTION  shift and go to state 15
    COMPARISON_INSTRUCTION shift and go to state 16
    COMPARISON_IM_INSTRUCTION shift and go to state 17
    DATAMOVE_INSTRUCTION shift and go to state 18
    MOVE_INSTRUCTION shift and go to state 19
    SEGMENT         shift and go to state 20
    LABEL           shift and go to state 14
    JUMP_LABEL      shift and go to state 21
    JUMP_REG        shift and go to state 22
    BRANCH_ZERO_INSTRUCTION shift and go to state 23
    BRANCH_INSTRUCTION shift and go to state 24

    program                        shift and go to state 1
    stmt_list                      shift and go to state 2
    stmt                           shift and go to state 3
    instruction                    shift and go to state 5
    segment                        shift and go to state 6
    labelInstruction               shift and go to state 7
    controlInstruction             shift and go to state 8

state 1

    (0) S' -> program .



state 2

    (1) program -> stmt_list .
    (3) stmt_list -> stmt_list . stmt
    (4) stmt -> . EOL
    (5) stmt -> . instruction EOL
    (6) stmt -> . segment EOL
    (7) stmt -> . labelInstruction EOL
    (8) stmt -> . controlInstruction EOL
    (18) instruction -> . SYSCALL
    (19) instruction -> . RINSTRUCTION REGISTER REGISTER REGISTER
    (20) instruction -> . RINSTRUCTION REGISTER REGISTER NUMBER
    (21) instruction -> . AL_IM_INSTRUCTION REGISTER REGISTER NUMBER
    (22) instruction -> . L_IM_INSTRUCTION REGISTER NUMBER
    (23) instruction -> . LS_INSTRUCTION REGISTER LABEL
    (24) instruction -> . LS_INSTRUCTION REGISTER LP REGISTER RP
    (25) instruction -> . LS_INSTRUCTION REGISTER NUMBER LP REGISTER RP
    (26) instruction -> . LA_INSTRUCTION REGISTER LABEL
    (27) instruction -> . COMPARISON_INSTRUCTION REGISTER REGISTER REGISTER
    (28) instruction -> . COMPARISON_IM_INSTRUCTION REGISTER REGISTER NUMBER
    (29) instruction -> . DATAMOVE_INSTRUCTION REGISTER
    (30) instruction -> . MOVE_INSTRUCTION REGISTER REGISTER
    (17) segment -> . SEGMENT
    (9) labelInstruction -> . LABEL COLON
    (10) labelInstruction -> . LABEL COLON DIRECTIVE STRING
    (11) labelInstruction -> . LABEL COLON DIRECTIVE NUMBER
    (12) controlInstruction -> . JUMP_LABEL LABEL
    (13) controlInstruction -> . JUMP_REG REGISTER
    (14) controlInstruction -> . BRANCH_ZERO_INSTRUCTION REGISTER LABEL
    (15) controlInstruction -> . BRANCH_INSTRUCTION REGISTER REGISTER LABEL
    (16) controlInstruction -> . BRANCH_INSTRUCTION REGISTER NUMBER LABEL

    $end            reduce using rule 1 (program -> stmt_list .)
    EOL             shift and go to state 4
    SYSCALL         shift and go to state 9
    RINSTRUCTION    shift and go to state 10
    AL_IM_INSTRUCTION shift and go to state 11
    L_IM_INSTRUCTION shift and go to state 12
    LS_INSTRUCTION  shift and go to state 13
    LA_INSTRUCTION  shift and go to state 15
    COMPARISON_INSTRUCTION shift and go to state 16
    COMPARISON_IM_INSTRUCTION shift and go to state 17
    DATAMOVE_INSTRUCTION shift and go to state 18
    MOVE_INSTRUCTION shift and go to state 19
    SEGMENT         shift and go to state 20
    LABEL           shift and go to state 14
    JUMP_LABEL      shift and go to state 21
    JUMP_REG        shift and go to state 22
    BRANCH_ZERO_INSTRUCTION shift and go to state 23
    BRANCH_INSTRUCTION shift and go to state 24

    stmt                           shift and go to state 25
    instruction                    shift and go to state 5
    segment                        shift and go to state 6
    labelInstruction               shift and go to state 7
    controlInstruction             shift and go to state 8

state 3

    (2) stmt_list -> stmt .

    EOL             reduce using rule 2 (stmt_list -> stmt .)
    SYSCALL         reduce using rule 2 (stmt_list -> stmt .)
    RINSTRUCTION    reduce using rule 2 (stmt_list -> stmt .)
    AL_IM_INSTRUCTION reduce using rule 2 (stmt_list -> stmt .)
    L_IM_INSTRUCTION reduce using rule 2 (stmt_list -> stmt .)
    LS_INSTRUCTION  reduce using rule 2 (stmt_list -> stmt .)
    LA_INSTRUCTION  reduce using rule 2 (stmt_list -> stmt .)
    COMPARISON_INSTRUCTION reduce using rule 2 (stmt_list -> stmt .)
    COMPARISON_IM_INSTRUCTION reduce using rule 2 (stmt_list -> stmt .)
    DATAMOVE_INSTRUCTION reduce using rule 2 (stmt_list -> stmt .)
    MOVE_INSTRUCTION reduce using rule 2 (stmt_list -> stmt .)
    SEGMENT         reduce using rule 2 (stmt_list -> stmt .)
    LABEL           reduce using rule 2 (stmt_list -> stmt .)
    JUMP_LABEL      reduce using rule 2 (stmt_list -> stmt .)
    JUMP_REG        reduce using rule 2 (stmt_list -> stmt .)
    BRANCH_ZERO_INSTRUCTION reduce using rule 2 (stmt_list -> stmt .)
    BRANCH_INSTRUCTION reduce using rule 2 (stmt_list -> stmt .)
    $end            reduce using rule 2 (stmt_list -> stmt .)


state 4

    (4) stmt -> EOL .

    EOL             reduce using rule 4 (stmt -> EOL .)
    SYSCALL         reduce using rule 4 (stmt -> EOL .)
    RINSTRUCTION    reduce using rule 4 (stmt -> EOL .)
    AL_IM_INSTRUCTION reduce using rule 4 (stmt -> EOL .)
    L_IM_INSTRUCTION reduce using rule 4 (stmt -> EOL .)
    LS_INSTRUCTION  reduce using rule 4 (stmt -> EOL .)
    LA_INSTRUCTION  reduce using rule 4 (stmt -> EOL .)
    COMPARISON_INSTRUCTION reduce using rule 4 (stmt -> EOL .)
    COMPARISON_IM_INSTRUCTION reduce using rule 4 (stmt -> EOL .)
    DATAMOVE_INSTRUCTION reduce using rule 4 (stmt -> EOL .)
    MOVE_INSTRUCTION reduce using rule 4 (stmt -> EOL .)
    SEGMENT         reduce using rule 4 (stmt -> EOL .)
    LABEL           reduce using rule 4 (stmt -> EOL .)
    JUMP_LABEL      reduce using rule 4 (stmt -> EOL .)
    JUMP_REG        reduce using rule 4 (stmt -> EOL .)
    BRANCH_ZERO_INSTRUCTION reduce using rule 4 (stmt -> EOL .)
    BRANCH_INSTRUCTION reduce using rule 4 (stmt -> EOL .)
    $end            reduce using rule 4 (stmt -> EOL .)


state 5

    (5) stmt -> instruction . EOL

    EOL             shift and go to state 26


state 6

    (6) stmt -> segment . EOL

    EOL             shift and go to state 27


state 7

    (7) stmt -> labelInstruction . EOL

    EOL             shift and go to state 28


state 8

    (8) stmt -> controlInstruction . EOL

    EOL             shift and go to state 29


state 9

    (18) instruction -> SYSCALL .

    EOL             reduce using rule 18 (instruction -> SYSCALL .)


state 10

    (19) instruction -> RINSTRUCTION . REGISTER REGISTER REGISTER
    (20) instruction -> RINSTRUCTION . REGISTER REGISTER NUMBER

    REGISTER        shift and go to state 30


state 11

    (21) instruction -> AL_IM_INSTRUCTION . REGISTER REGISTER NUMBER

    REGISTER        shift and go to state 31


state 12

    (22) instruction -> L_IM_INSTRUCTION . REGISTER NUMBER

    REGISTER        shift and go to state 32


state 13

    (23) instruction -> LS_INSTRUCTION . REGISTER LABEL
    (24) instruction -> LS_INSTRUCTION . REGISTER LP REGISTER RP
    (25) instruction -> LS_INSTRUCTION . REGISTER NUMBER LP REGISTER RP

    REGISTER        shift and go to state 33


state 14

    (9) labelInstruction -> LABEL . COLON
    (10) labelInstruction -> LABEL . COLON DIRECTIVE STRING
    (11) labelInstruction -> LABEL . COLON DIRECTIVE NUMBER

    COLON           shift and go to state 34


state 15

    (26) instruction -> LA_INSTRUCTION . REGISTER LABEL

    REGISTER        shift and go to state 35


state 16

    (27) instruction -> COMPARISON_INSTRUCTION . REGISTER REGISTER REGISTER

    REGISTER        shift and go to state 36


state 17

    (28) instruction -> COMPARISON_IM_INSTRUCTION . REGISTER REGISTER NUMBER

    REGISTER        shift and go to state 37


state 18

    (29) instruction -> DATAMOVE_INSTRUCTION . REGISTER

    REGISTER        shift and go to state 38


state 19

    (30) instruction -> MOVE_INSTRUCTION . REGISTER REGISTER

    REGISTER        shift and go to state 39


state 20

    (17) segment -> SEGMENT .

    EOL             reduce using rule 17 (segment -> SEGMENT .)


state 21

    (12) controlInstruction -> JUMP_LABEL . LABEL

    LABEL           shift and go to state 40


state 22

    (13) controlInstruction -> JUMP_REG . REGISTER

    REGISTER        shift and go to state 41


state 23

    (14) controlInstruction -> BRANCH_ZERO_INSTRUCTION . REGISTER LABEL

    REGISTER        shift and go to state 42


state 24

    (15) controlInstruction -> BRANCH_INSTRUCTION . REGISTER REGISTER LABEL
    (16) controlInstruction -> BRANCH_INSTRUCTION . REGISTER NUMBER LABEL

    REGISTER        shift and go to state 43


state 25

    (3) stmt_list -> stmt_list stmt .

    EOL             reduce using rule 3 (stmt_list -> stmt_list stmt .)
    SYSCALL         reduce using rule 3 (stmt_list -> stmt_list stmt .)
    RINSTRUCTION    reduce using rule 3 (stmt_list -> stmt_list stmt .)
    AL_IM_INSTRUCTION reduce using rule 3 (stmt_list -> stmt_list stmt .)
    L_IM_INSTRUCTION reduce using rule 3 (stmt_list -> stmt_list stmt .)
    LS_INSTRUCTION  reduce using rule 3 (stmt_list -> stmt_list stmt .)
    LA_INSTRUCTION  reduce using rule 3 (stmt_list -> stmt_list stmt .)
    COMPARISON_INSTRUCTION reduce using rule 3 (stmt_list -> stmt_list stmt .)
    COMPARISON_IM_INSTRUCTION reduce using rule 3 (stmt_list -> stmt_list stmt .)
    DATAMOVE_INSTRUCTION reduce using rule 3 (stmt_list -> stmt_list stmt .)
    MOVE_INSTRUCTION reduce using rule 3 (stmt_list -> stmt_list stmt .)
    SEGMENT         reduce using rule 3 (stmt_list -> stmt_list stmt .)
    LABEL           reduce using rule 3 (stmt_list -> stmt_list stmt .)
    JUMP_LABEL      reduce using rule 3 (stmt_list -> stmt_list stmt .)
    JUMP_REG        reduce using rule 3 (stmt_list -> stmt_list stmt .)
    BRANCH_ZERO_INSTRUCTION reduce using rule 3 (stmt_list -> stmt_list stmt .)
    BRANCH_INSTRUCTION reduce using rule 3 (stmt_list -> stmt_list stmt .)
    $end            reduce using rule 3 (stmt_list -> stmt_list stmt .)


state 26

    (5) stmt -> instruction EOL .

    EOL             reduce using rule 5 (stmt -> instruction EOL .)
    SYSCALL         reduce using rule 5 (stmt -> instruction EOL .)
    RINSTRUCTION    reduce using rule 5 (stmt -> instruction EOL .)
    AL_IM_INSTRUCTION reduce using rule 5 (stmt -> instruction EOL .)
    L_IM_INSTRUCTION reduce using rule 5 (stmt -> instruction EOL .)
    LS_INSTRUCTION  reduce using rule 5 (stmt -> instruction EOL .)
    LA_INSTRUCTION  reduce using rule 5 (stmt -> instruction EOL .)
    COMPARISON_INSTRUCTION reduce using rule 5 (stmt -> instruction EOL .)
    COMPARISON_IM_INSTRUCTION reduce using rule 5 (stmt -> instruction EOL .)
    DATAMOVE_INSTRUCTION reduce using rule 5 (stmt -> instruction EOL .)
    MOVE_INSTRUCTION reduce using rule 5 (stmt -> instruction EOL .)
    SEGMENT         reduce using rule 5 (stmt -> instruction EOL .)
    LABEL           reduce using rule 5 (stmt -> instruction EOL .)
    JUMP_LABEL      reduce using rule 5 (stmt -> instruction EOL .)
    JUMP_REG        reduce using rule 5 (stmt -> instruction EOL .)
    BRANCH_ZERO_INSTRUCTION reduce using rule 5 (stmt -> instruction EOL .)
    BRANCH_INSTRUCTION reduce using rule 5 (stmt -> instruction EOL .)
    $end            reduce using rule 5 (stmt -> instruction EOL .)


state 27

    (6) stmt -> segment EOL .

    EOL             reduce using rule 6 (stmt -> segment EOL .)
    SYSCALL         reduce using rule 6 (stmt -> segment EOL .)
    RINSTRUCTION    reduce using rule 6 (stmt -> segment EOL .)
    AL_IM_INSTRUCTION reduce using rule 6 (stmt -> segment EOL .)
    L_IM_INSTRUCTION reduce using rule 6 (stmt -> segment EOL .)
    LS_INSTRUCTION  reduce using rule 6 (stmt -> segment EOL .)
    LA_INSTRUCTION  reduce using rule 6 (stmt -> segment EOL .)
    COMPARISON_INSTRUCTION reduce using rule 6 (stmt -> segment EOL .)
    COMPARISON_IM_INSTRUCTION reduce using rule 6 (stmt -> segment EOL .)
    DATAMOVE_INSTRUCTION reduce using rule 6 (stmt -> segment EOL .)
    MOVE_INSTRUCTION reduce using rule 6 (stmt -> segment EOL .)
    SEGMENT         reduce using rule 6 (stmt -> segment EOL .)
    LABEL           reduce using rule 6 (stmt -> segment EOL .)
    JUMP_LABEL      reduce using rule 6 (stmt -> segment EOL .)
    JUMP_REG        reduce using rule 6 (stmt -> segment EOL .)
    BRANCH_ZERO_INSTRUCTION reduce using rule 6 (stmt -> segment EOL .)
    BRANCH_INSTRUCTION reduce using rule 6 (stmt -> segment EOL .)
    $end            reduce using rule 6 (stmt -> segment EOL .)


state 28

    (7) stmt -> labelInstruction EOL .

    EOL             reduce using rule 7 (stmt -> labelInstruction EOL .)
    SYSCALL         reduce using rule 7 (stmt -> labelInstruction EOL .)
    RINSTRUCTION    reduce using rule 7 (stmt -> labelInstruction EOL .)
    AL_IM_INSTRUCTION reduce using rule 7 (stmt -> labelInstruction EOL .)
    L_IM_INSTRUCTION reduce using rule 7 (stmt -> labelInstruction EOL .)
    LS_INSTRUCTION  reduce using rule 7 (stmt -> labelInstruction EOL .)
    LA_INSTRUCTION  reduce using rule 7 (stmt -> labelInstruction EOL .)
    COMPARISON_INSTRUCTION reduce using rule 7 (stmt -> labelInstruction EOL .)
    COMPARISON_IM_INSTRUCTION reduce using rule 7 (stmt -> labelInstruction EOL .)
    DATAMOVE_INSTRUCTION reduce using rule 7 (stmt -> labelInstruction EOL .)
    MOVE_INSTRUCTION reduce using rule 7 (stmt -> labelInstruction EOL .)
    SEGMENT         reduce using rule 7 (stmt -> labelInstruction EOL .)
    LABEL           reduce using rule 7 (stmt -> labelInstruction EOL .)
    JUMP_LABEL      reduce using rule 7 (stmt -> labelInstruction EOL .)
    JUMP_REG        reduce using rule 7 (stmt -> labelInstruction EOL .)
    BRANCH_ZERO_INSTRUCTION reduce using rule 7 (stmt -> labelInstruction EOL .)
    BRANCH_INSTRUCTION reduce using rule 7 (stmt -> labelInstruction EOL .)
    $end            reduce using rule 7 (stmt -> labelInstruction EOL .)


state 29

    (8) stmt -> controlInstruction EOL .

    EOL             reduce using rule 8 (stmt -> controlInstruction EOL .)
    SYSCALL         reduce using rule 8 (stmt -> controlInstruction EOL .)
    RINSTRUCTION    reduce using rule 8 (stmt -> controlInstruction EOL .)
    AL_IM_INSTRUCTION reduce using rule 8 (stmt -> controlInstruction EOL .)
    L_IM_INSTRUCTION reduce using rule 8 (stmt -> controlInstruction EOL .)
    LS_INSTRUCTION  reduce using rule 8 (stmt -> controlInstruction EOL .)
    LA_INSTRUCTION  reduce using rule 8 (stmt -> controlInstruction EOL .)
    COMPARISON_INSTRUCTION reduce using rule 8 (stmt -> controlInstruction EOL .)
    COMPARISON_IM_INSTRUCTION reduce using rule 8 (stmt -> controlInstruction EOL .)
    DATAMOVE_INSTRUCTION reduce using rule 8 (stmt -> controlInstruction EOL .)
    MOVE_INSTRUCTION reduce using rule 8 (stmt -> controlInstruction EOL .)
    SEGMENT         reduce using rule 8 (stmt -> controlInstruction EOL .)
    LABEL           reduce using rule 8 (stmt -> controlInstruction EOL .)
    JUMP_LABEL      reduce using rule 8 (stmt -> controlInstruction EOL .)
    JUMP_REG        reduce using rule 8 (stmt -> controlInstruction EOL .)
    BRANCH_ZERO_INSTRUCTION reduce using rule 8 (stmt -> controlInstruction EOL .)
    BRANCH_INSTRUCTION reduce using rule 8 (stmt -> controlInstruction EOL .)
    $end            reduce using rule 8 (stmt -> controlInstruction EOL .)


state 30

    (19) instruction -> RINSTRUCTION REGISTER . REGISTER REGISTER
    (20) instruction -> RINSTRUCTION REGISTER . REGISTER NUMBER

    REGISTER        shift and go to state 44


state 31

    (21) instruction -> AL_IM_INSTRUCTION REGISTER . REGISTER NUMBER

    REGISTER        shift and go to state 45


state 32

    (22) instruction -> L_IM_INSTRUCTION REGISTER . NUMBER

    NUMBER          shift and go to state 46


state 33

    (23) instruction -> LS_INSTRUCTION REGISTER . LABEL
    (24) instruction -> LS_INSTRUCTION REGISTER . LP REGISTER RP
    (25) instruction -> LS_INSTRUCTION REGISTER . NUMBER LP REGISTER RP

    LABEL           shift and go to state 47
    LP              shift and go to state 48
    NUMBER          shift and go to state 49


state 34

    (9) labelInstruction -> LABEL COLON .
    (10) labelInstruction -> LABEL COLON . DIRECTIVE STRING
    (11) labelInstruction -> LABEL COLON . DIRECTIVE NUMBER

    EOL             reduce using rule 9 (labelInstruction -> LABEL COLON .)
    DIRECTIVE       shift and go to state 50


state 35

    (26) instruction -> LA_INSTRUCTION REGISTER . LABEL

    LABEL           shift and go to state 51


state 36

    (27) instruction -> COMPARISON_INSTRUCTION REGISTER . REGISTER REGISTER

    REGISTER        shift and go to state 52


state 37

    (28) instruction -> COMPARISON_IM_INSTRUCTION REGISTER . REGISTER NUMBER

    REGISTER        shift and go to state 53


state 38

    (29) instruction -> DATAMOVE_INSTRUCTION REGISTER .

    EOL             reduce using rule 29 (instruction -> DATAMOVE_INSTRUCTION REGISTER .)


state 39

    (30) instruction -> MOVE_INSTRUCTION REGISTER . REGISTER

    REGISTER        shift and go to state 54


state 40

    (12) controlInstruction -> JUMP_LABEL LABEL .

    EOL             reduce using rule 12 (controlInstruction -> JUMP_LABEL LABEL .)


state 41

    (13) controlInstruction -> JUMP_REG REGISTER .

    EOL             reduce using rule 13 (controlInstruction -> JUMP_REG REGISTER .)


state 42

    (14) controlInstruction -> BRANCH_ZERO_INSTRUCTION REGISTER . LABEL

    LABEL           shift and go to state 55


state 43

    (15) controlInstruction -> BRANCH_INSTRUCTION REGISTER . REGISTER LABEL
    (16) controlInstruction -> BRANCH_INSTRUCTION REGISTER . NUMBER LABEL

    REGISTER        shift and go to state 56
    NUMBER          shift and go to state 57


state 44

    (19) instruction -> RINSTRUCTION REGISTER REGISTER . REGISTER
    (20) instruction -> RINSTRUCTION REGISTER REGISTER . NUMBER

    REGISTER        shift and go to state 58
    NUMBER          shift and go to state 59


state 45

    (21) instruction -> AL_IM_INSTRUCTION REGISTER REGISTER . NUMBER

    NUMBER          shift and go to state 60


state 46

    (22) instruction -> L_IM_INSTRUCTION REGISTER NUMBER .

    EOL             reduce using rule 22 (instruction -> L_IM_INSTRUCTION REGISTER NUMBER .)


state 47

    (23) instruction -> LS_INSTRUCTION REGISTER LABEL .

    EOL             reduce using rule 23 (instruction -> LS_INSTRUCTION REGISTER LABEL .)


state 48

    (24) instruction -> LS_INSTRUCTION REGISTER LP . REGISTER RP

    REGISTER        shift and go to state 61


state 49

    (25) instruction -> LS_INSTRUCTION REGISTER NUMBER . LP REGISTER RP

    LP              shift and go to state 62


state 50

    (10) labelInstruction -> LABEL COLON DIRECTIVE . STRING
    (11) labelInstruction -> LABEL COLON DIRECTIVE . NUMBER

    STRING          shift and go to state 63
    NUMBER          shift and go to state 64


state 51

    (26) instruction -> LA_INSTRUCTION REGISTER LABEL .

    EOL             reduce using rule 26 (instruction -> LA_INSTRUCTION REGISTER LABEL .)


state 52

    (27) instruction -> COMPARISON_INSTRUCTION REGISTER REGISTER . REGISTER

    REGISTER        shift and go to state 65


state 53

    (28) instruction -> COMPARISON_IM_INSTRUCTION REGISTER REGISTER . NUMBER

    NUMBER          shift and go to state 66


state 54

    (30) instruction -> MOVE_INSTRUCTION REGISTER REGISTER .

    EOL             reduce using rule 30 (instruction -> MOVE_INSTRUCTION REGISTER REGISTER .)


state 55

    (14) controlInstruction -> BRANCH_ZERO_INSTRUCTION REGISTER LABEL .

    EOL             reduce using rule 14 (controlInstruction -> BRANCH_ZERO_INSTRUCTION REGISTER LABEL .)


state 56

    (15) controlInstruction -> BRANCH_INSTRUCTION REGISTER REGISTER . LABEL

    LABEL           shift and go to state 67


state 57

    (16) controlInstruction -> BRANCH_INSTRUCTION REGISTER NUMBER . LABEL

    LABEL           shift and go to state 68


state 58

    (19) instruction -> RINSTRUCTION REGISTER REGISTER REGISTER .

    EOL             reduce using rule 19 (instruction -> RINSTRUCTION REGISTER REGISTER REGISTER .)


state 59

    (20) instruction -> RINSTRUCTION REGISTER REGISTER NUMBER .

    EOL             reduce using rule 20 (instruction -> RINSTRUCTION REGISTER REGISTER NUMBER .)


state 60

    (21) instruction -> AL_IM_INSTRUCTION REGISTER REGISTER NUMBER .

    EOL             reduce using rule 21 (instruction -> AL_IM_INSTRUCTION REGISTER REGISTER NUMBER .)


state 61

    (24) instruction -> LS_INSTRUCTION REGISTER LP REGISTER . RP

    RP              shift and go to state 69


state 62

    (25) instruction -> LS_INSTRUCTION REGISTER NUMBER LP . REGISTER RP

    REGISTER        shift and go to state 70


state 63

    (10) labelInstruction -> LABEL COLON DIRECTIVE STRING .

    EOL             reduce using rule 10 (labelInstruction -> LABEL COLON DIRECTIVE STRING .)


state 64

    (11) labelInstruction -> LABEL COLON DIRECTIVE NUMBER .

    EOL             reduce using rule 11 (labelInstruction -> LABEL COLON DIRECTIVE NUMBER .)


state 65

    (27) instruction -> COMPARISON_INSTRUCTION REGISTER REGISTER REGISTER .

    EOL             reduce using rule 27 (instruction -> COMPARISON_INSTRUCTION REGISTER REGISTER REGISTER .)


state 66

    (28) instruction -> COMPARISON_IM_INSTRUCTION REGISTER REGISTER NUMBER .

    EOL             reduce using rule 28 (instruction -> COMPARISON_IM_INSTRUCTION REGISTER REGISTER NUMBER .)


state 67

    (15) controlInstruction -> BRANCH_INSTRUCTION REGISTER REGISTER LABEL .

    EOL             reduce using rule 15 (controlInstruction -> BRANCH_INSTRUCTION REGISTER REGISTER LABEL .)


state 68

    (16) controlInstruction -> BRANCH_INSTRUCTION REGISTER NUMBER LABEL .

    EOL             reduce using rule 16 (controlInstruction -> BRANCH_INSTRUCTION REGISTER NUMBER LABEL .)


state 69

    (24) instruction -> LS_INSTRUCTION REGISTER LP REGISTER RP .

    EOL             reduce using rule 24 (instruction -> LS_INSTRUCTION REGISTER LP REGISTER RP .)


state 70

    (25) instruction -> LS_INSTRUCTION REGISTER NUMBER LP REGISTER . RP

    RP              shift and go to state 71


state 71

    (25) instruction -> LS_INSTRUCTION REGISTER NUMBER LP REGISTER RP .

    EOL             reduce using rule 25 (instruction -> LS_INSTRUCTION REGISTER NUMBER LP REGISTER RP .)

